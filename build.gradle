apply plugin: "java"

version '1.0'

sourceSets.main.java.srcDirs = ["src"]

repositories{
    mavenCentral()
    maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven{ url 'https://www.jitpack.io' }
}

java{
    targetCompatibility = 8
    sourceCompatibility = JavaVersion.VERSION_17
}

ext{
    //the build number that this mod is made for
    mindustryVersion = 'v146'
    jabelVersion = "93fde537c7"
    //windows sucks
    isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

//java 8 backwards compatibility flag
allprojects{
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
    }
}

dependencies{
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"

    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
}

//force arc version
configurations.all{
    resolutionStrategy.eachDependency { details ->
        if(details.requested.group == 'com.github.Anuken.Arc'){
            details.useVersion "$mindustryVersion"
        }
    }
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    var prop = gradle.startParameter.projectProperties
    String asString = null

    if(prop.containsKey('ex')) {
        asString = "${archivesBaseName}Desktop.${prop.get('ex')}"
    } else {
        println('Using default file exception (jar)')
        asString = "${archivesBaseName}Desktop.jar"
    }

    archiveFileName = asString

    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    from("assets") {
        include "**"
    }

    from(rootDir) {
        include "mod.hjson"
        include "icon.png"
        include "scripts/**"
    }

    doLast {
        if(prop.containsKey('path')) {
            copy {
                println("Copy file ${asString} to destonation")
                from layout.buildDirectory.file("libs/$asString")
                into layout.buildDirectory.dir(prop.get('path'))
            }
        }

        if(prop.containsKey('m')) {
            exec {
                commandLine 'cmd', '/c', "\"${prop.get('m')}\""
            }
        }
    }
}